class Solution {
    public boolean dfs(ArrayList<ArrayList<Integer>> adj , int src , int dest , boolean[] visited){
          visited[src] = true;

          if(src == dest)
             return true;

          boolean isCheck = false;
          for(int i : adj.get(src)){
            if(visited[i] == false)
               isCheck = isCheck || dfs(adj , i , dest , visited);
          }

          return isCheck;
    }
    public List<Boolean> checkIfPrerequisite(int numCourses, int[][] prerequisites, int[][] queries) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<ArrayList<Integer>>();
        int n = prerequisites.length;
        List<Boolean> list = new ArrayList<>();
        for (int i = 0; i < numCourses; i++){
            adj.add(new ArrayList<>());
        }
        for (int i = 0; i < n; i++){
            adj.get(prerequisites[i][0]).add(prerequisites[i][1]);
        }

        for(int i = 0; i < queries.length; i++){
            int src = queries[i][0];
            int dest = queries[i][1];

            boolean visited[] = new boolean[numCourses];
            list.add(dfs(adj , src , dest , visited));
        }
        return list;
    }
}
