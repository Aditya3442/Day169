class Pair{
    TreeNode node;
    int index;
    Pair(TreeNode node , int index){
        this.node = node;
        this.index = index;
    }
}
class Solution {
    public int widthOfBinaryTree(TreeNode root) {      
        Queue<Pair> q = new LinkedList<>();
        q.add(new Pair(root , 0));
        int result = 0;
        while(!q.isEmpty()){
            int size = q.size();
            int minus = q.peek().index;
            int leftIndex = 0;
            int rightIndex = 0;
            for(int i = 0; i < size; i++){
                 Pair p = q.poll();
                 TreeNode node = p.node;
                 int ind = p.index - minus;
                 if(i == 0)
                   leftIndex = p.index;
                 if(i == size - 1)
                   rightIndex = p.index;
                 if(node.left != null)
                     q.offer(new Pair(node.left , 2 * ind + 1));
                 if(node.right != null)
                     q.offer(new Pair(node.right , 2 * ind + 2));
            }
            result = Math.max(result , rightIndex - leftIndex + 1);
        }
        return result;
    }
}
