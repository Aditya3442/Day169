class Solution {
    public static void dfs(int i , ArrayList<ArrayList<Integer>> adj , boolean[] visited , Stack<Integer> stk){
        
        visited[i] = true;
        for(int x : adj.get(i)){
            if(visited[x] == false)
                dfs(x , adj , visited , stk);
        }
        stk.push(i);
    }
    // Function to return list containing vertices in Topological order.
    static ArrayList<Integer> topologicalSort(ArrayList<ArrayList<Integer>> adj) {
        // Your code here
        int n = adj.size();
        boolean visited[] = new boolean[n];
        Stack<Integer> stk = new Stack<>();
        for(int i = 0; i < n; i++){
            if(visited[i] == false)
                dfs(i , adj , visited , stk);
        }
        
        ArrayList<Integer> list = new ArrayList<>();
        while(!stk.isEmpty()){
            list.add(stk.pop());
        }
        return list;
    }
}
